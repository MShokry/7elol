;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 20/01/2014 03:55:58 ã
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2896			GOTO	_main
$0165	$	_count:
;ontrolhub.c,214 :: 		void count(){
;ontrolhub.c,216 :: 		if(ir_rx_ok){               //if bit recived from ir
$0165	$1303			BCF	STATUS, RP1
$0166	$1283			BCF	STATUS, RP0
$0167	$1CA0			BTFSS	_ir_rx_data, 1
$0168	$29C1			GOTO	L_count_32
;ontrolhub.c,217 :: 		if(!ir_rx_err){            //if no error test bit width
$0169	$1920			BTFSC	_ir_rx_data, 2
$016A	$298A			GOTO	L_count_33
;ontrolhub.c,218 :: 		if(ir_rx_width>=0x01 && ir_rx_width<=0x03)
$016B	$3001			MOVLW	1
$016C	$020F			SUBWF	TMR1H, 0
$016D	$1C03			BTFSS	STATUS, C
$016E	$2975			GOTO	L_count_36
$016F	$080F			MOVF	TMR1H, 0
$0170	$3C03			SUBLW	3
$0171	$1C03			BTFSS	STATUS, C
$0172	$2975			GOTO	L_count_36
$0173	$	L275_ex_L_count_36:
;ontrolhub.c,219 :: 		ir_rx_bit=0;          // high width >=xxx ,< xxx usec   abs 560  usec
$0173	$1020			BCF	_ir_rx_data, 0
$0174	$298A			GOTO	L_count_37
$0175	$	L_count_36:
;ontrolhub.c,220 :: 		else if(ir_rx_width>=0x07 && ir_rx_width<=0x09)
$0175	$3007			MOVLW	7
$0176	$020F			SUBWF	TMR1H, 0
$0177	$1C03			BTFSS	STATUS, C
$0178	$297F			GOTO	L_count_40
$0179	$080F			MOVF	TMR1H, 0
$017A	$3C09			SUBLW	9
$017B	$1C03			BTFSS	STATUS, C
$017C	$297F			GOTO	L_count_40
$017D	$	L289_ex_L_count_40:
;ontrolhub.c,221 :: 		ir_rx_bit=1;          // high width >=xxx ,<xxx  msec  abs 1.69
$017D	$1420			BSF	_ir_rx_data, 0
$017E	$298A			GOTO	L_count_41
$017F	$	L_count_40:
;ontrolhub.c,222 :: 		else if(ir_rx_width>=0x14 && ir_rx_width<=0x16)
$017F	$3014			MOVLW	20
$0180	$020F			SUBWF	TMR1H, 0
$0181	$1C03			BTFSS	STATUS, C
$0182	$2989			GOTO	L_count_44
$0183	$080F			MOVF	TMR1H, 0
$0184	$3C16			SUBLW	22
$0185	$1C03			BTFSS	STATUS, C
$0186	$2989			GOTO	L_count_44
$0187	$	L303_ex_L_count_44:
;ontrolhub.c,223 :: 		ir_rx_lead=1;         // leading start >=xxx ,<xxx  msec  abs 4.5
$0187	$15A0			BSF	_ir_rx_data, 3
$0188	$298A			GOTO	L_count_45
$0189	$	L_count_44:
;ontrolhub.c,225 :: 		ir_rx_lead=0;         // No lead
$0189	$11A0			BCF	_ir_rx_data, 3
$018A	$	L_count_45:
$018A	$	L_count_41:
$018A	$	L_count_37:
;ontrolhub.c,226 :: 		}
$018A	$	L_count_33:
;ontrolhub.c,227 :: 		ir_rx_ok=0;
$018A	$10A0			BCF	_ir_rx_data, 1
;ontrolhub.c,229 :: 		if(ir_rx_lead){             //if lead readed
$018B	$1DA0			BTFSS	_ir_rx_data, 3
$018C	$29B9			GOTO	L_count_46
;ontrolhub.c,230 :: 		if(ir_rx_start){          //no to read leading indicator first time as RX bit
$018D	$1F20			BTFSS	_ir_rx_data, 6
$018E	$29B7			GOTO	L_count_47
;ontrolhub.c,231 :: 		if(data_bit){           //at first don't shift data in else shift
$018F	$0821			MOVF	_data_bit, 0
$0190	$1903			BTFSC	STATUS, Z
$0191	$2998			GOTO	L_count_48
;ontrolhub.c,232 :: 		rx_tmp >>= 1;
$0192	$0CA2			RRF	_rx_tmp, 1
$0193	$13A2			BCF	_rx_tmp, 7
;ontrolhub.c,233 :: 		if(ir_rx_bit)
$0194	$1C20			BTFSS	_ir_rx_data, 0
$0195	$2997			GOTO	L_count_49
;ontrolhub.c,234 :: 		rx_tmp |= 0x80;
$0196	$17A2			BSF	_rx_tmp, 7
$0197	$	L_count_49:
;ontrolhub.c,235 :: 		}                     //data.Bit[Loop] = input bit
$0197	$299C			GOTO	L_count_50
$0198	$	L_count_48:
;ontrolhub.c,237 :: 		if(ir_rx_bit)
$0198	$1C20			BTFSS	_ir_rx_data, 0
$0199	$299C			GOTO	L_count_51
;ontrolhub.c,238 :: 		rx_tmp = 0x80;
$019A	$3080			MOVLW	128
$019B	$00A2			MOVWF	_rx_tmp
$019C	$	L_count_51:
$019C	$	L_count_50:
;ontrolhub.c,240 :: 		data_bit++;             //select next bit
$019C	$0AA1			INCF	_data_bit, 1
;ontrolhub.c,241 :: 		if(data_bit >= 8){      //if readed 8 bits
$019D	$3008			MOVLW	8
$019E	$0221			SUBWF	_data_bit, 0
$019F	$1C03			BTFSS	STATUS, C
$01A0	$29B7			GOTO	L_count_52
;ontrolhub.c,242 :: 		data_bit=0x00;
$01A1	$01A1			CLRF	_data_bit, 1
;ontrolhub.c,243 :: 		rx_data[data_byte]=rx_tmp;//store the byte
$01A2	$0827			MOVF	_data_byte, 0
$01A3	$3F23			ADDLW	_rx_data
$01A4	$00F0			MOVWF	STACK_0
$01A5	$0870			MOVF	STACK_0, 0
$01A6	$0084			MOVWF	FSR
$01A7	$0822			MOVF	_rx_tmp, 0
$01A8	$0080			MOVWF	INDF
;ontrolhub.c,244 :: 		rx_tmp=0x00;         //clear the temp data
$01A9	$01A2			CLRF	_rx_tmp, 1
;ontrolhub.c,245 :: 		data_byte++;         //next byte
$01AA	$0AA7			INCF	_data_byte, 1
;ontrolhub.c,247 :: 		if(data_byte>=4){    //4 bytes recived
$01AB	$3004			MOVLW	4
$01AC	$0227			SUBWF	_data_byte, 0
$01AD	$1C03			BTFSS	STATUS, C
$01AE	$29B7			GOTO	L_count_53
;ontrolhub.c,248 :: 		data_byte=0x00;
$01AF	$01A7			CLRF	_data_byte, 1
;ontrolhub.c,249 :: 		ir_rx_full=1;       //code fully recived
$01B0	$16A0			BSF	_ir_rx_data, 5
;ontrolhub.c,250 :: 		if(!(rx_data[2]==~rx_data[3])){
$01B1	$0926			COMF	_rx_data+3, W
$01B2	$00F1			MOVWF	STACK_1
$01B3	$0825			MOVF	_rx_data+2, 0
$01B4	$0671			XORWF	STACK_1, 0
$01B5	$1D03			BTFSS	STATUS, Z
$01B6	$29C3			GOTO	___count_error
;ontrolhub.c,253 :: 		}
$01B7	$	L_count_54:
;ontrolhub.c,254 :: 		}
$01B7	$	L_count_53:
;ontrolhub.c,255 :: 		}
$01B7	$	L_count_52:
;ontrolhub.c,256 :: 		}
$01B7	$	L_count_47:
;ontrolhub.c,257 :: 		ir_rx_start=1;
$01B7	$1720			BSF	_ir_rx_data, 6
;ontrolhub.c,258 :: 		}else{                      //leding = 0
$01B8	$29BA			GOTO	L_count_55
$01B9	$	L_count_46:
;ontrolhub.c,259 :: 		goto error;
$01B9	$29C3			GOTO	___count_error
;ontrolhub.c,260 :: 		}
$01BA	$	L_count_55:
;ontrolhub.c,262 :: 		if(ir_rx_full){
$01BA	$1EA0			BTFSS	_ir_rx_data, 5
$01BB	$29C1			GOTO	L_count_56
;ontrolhub.c,263 :: 		code[0]=rx_data[0];
$01BC	$0823			MOVF	_rx_data, 0
$01BD	$00A8			MOVWF	_code
;ontrolhub.c,264 :: 		code[1]=rx_data[2];
$01BE	$0825			MOVF	_rx_data+2, 0
$01BF	$00A9			MOVWF	_code+1
;ontrolhub.c,265 :: 		goto error;
$01C0	$29C3			GOTO	___count_error
;ontrolhub.c,266 :: 		}
$01C1	$	L_count_56:
;ontrolhub.c,267 :: 		}
$01C1	$	L_count_32:
;ontrolhub.c,269 :: 		if(ir_rx_err){              //at any time error reset all
$01C1	$1D20			BTFSS	_ir_rx_data, 2
$01C2	$29C9			GOTO	L_count_57
;ontrolhub.c,270 :: 		error:
$01C3	$	___count_error:
;ontrolhub.c,271 :: 		data_bit=0X00;             //shifting rx data
$01C3	$01A1			CLRF	_data_bit, 1
;ontrolhub.c,272 :: 		rx_data[0]=0x00;rx_data[1]=0x00;
$01C4	$01A3			CLRF	_rx_data, 1
$01C5	$01A4			CLRF	_rx_data+1, 1
;ontrolhub.c,273 :: 		rx_data[2]=0x00;rx_data[3]=0x00;
$01C6	$01A5			CLRF	_rx_data+2, 1
$01C7	$01A6			CLRF	_rx_data+3, 1
;ontrolhub.c,275 :: 		ir_rx_data =0x00;      //clear all RX parameters
$01C8	$01A0			CLRF	_ir_rx_data, 1
;ontrolhub.c,276 :: 		}
$01C9	$	L_count_57:
;ontrolhub.c,277 :: 		ir_rx_indicator=ir_rx_start;
$01C9	$3000			MOVLW	0
$01CA	$1B20			BTFSC	_ir_rx_data, 6
$01CB	$3001			MOVLW	1
$01CC	$00F1			MOVWF	STACK_1
$01CD	$3000			MOVLW	0
$01CE	$1871			BTFSC	STACK_1, 0
$01CF	$3040			MOVLW	64
$01D0	$0606			XORWF	PORTB, 0
$01D1	$3940			ANDLW	64
$01D2	$0686			XORWF	PORTB, 1
;ontrolhub.c,278 :: 		}
$01D3	$0008			RETURN
$0004	$	_interrupt:
$0004	$00FF			MOVWF	STACK_15
$0005	$0E03			SWAPF	STATUS, 0
$0006	$0183			CLRF	STATUS
$0007	$00BC			MOVWF	?saveSTATUS
$0008	$0804			MOVF	FSR, 0
$0009	$00BB			MOVWF	?saveFSR
$000A	$080A			MOVF	PCLATH, 0
$000B	$00BD			MOVWF	?savePCLATH
$000C	$018A			CLRF	PCLATH
$000D	$0871			MOVF	STACK_1, 0
$000E	$00C4			MOVWF	STSAVED_1
$000F	$0870			MOVF	STACK_0, 0
$0010	$00C3			MOVWF	STSAVED_0
;ontrolhub.c,146 :: 		void interrupt() {           //Interrupt routines
;ontrolhub.c,149 :: 		if (PIR1.TMR1IF){           //Timer 1 => used as pulse width measure
$0011	$1C0C			BTFSS	PIR1, 0
$0012	$2817			GOTO	L_interrupt_13
;ontrolhub.c,150 :: 		ir_rx_err=1;             //if over flow => data error
$0013	$1520			BSF	_ir_rx_data, 2
;ontrolhub.c,151 :: 		T1CON.F0=0;              //Timer1 disable
$0014	$1010			BCF	T1CON, 0
;ontrolhub.c,152 :: 		count();                 //call every interrupt routine
$0015	$2165			CALL	_count
;ontrolhub.c,153 :: 		PIR1.TMR1IF=0;           //clear interrupt
$0016	$100C			BCF	PIR1, 0
;ontrolhub.c,154 :: 		}
$0017	$	L_interrupt_13:
;ontrolhub.c,156 :: 		if(INTCON.RBIF){             // PORTB interrupt at RB7 as IR Rx
$0017	$1C0B			BTFSS	INTCON, 0
$0018	$2824			GOTO	L_interrupt_14
;ontrolhub.c,157 :: 		if(ir_pin){               //If RX pin changed to high
$0019	$1F86			BTFSS	PORTB, 7
$001A	$2820			GOTO	L_interrupt_15
;ontrolhub.c,158 :: 		ir_rx_width_l=0x00;     //Timer 1 reset counter
$001B	$018E			CLRF	TMR1L, 1
;ontrolhub.c,159 :: 		ir_rx_width=0x00;
$001C	$018F			CLRF	TMR1H, 1
;ontrolhub.c,160 :: 		T1CON.F0=1;             //Timer1 enable to start measuring pulse width
$001D	$1410			BSF	T1CON, 0
;ontrolhub.c,161 :: 		ir_rx_ok=0;             //ReSet bit recived indicator
$001E	$10A0			BCF	_ir_rx_data, 1
;ontrolhub.c,162 :: 		}
$001F	$2822			GOTO	L_interrupt_16
$0020	$	L_interrupt_15:
;ontrolhub.c,164 :: 		T1CON.F0=0;              //Timer1 disable
$0020	$1010			BCF	T1CON, 0
;ontrolhub.c,165 :: 		ir_rx_ok=1;              //Set bit recived indicator
$0021	$14A0			BSF	_ir_rx_data, 1
;ontrolhub.c,166 :: 		}
$0022	$	L_interrupt_16:
;ontrolhub.c,167 :: 		count();                     //call every interrupt routine
$0022	$2165			CALL	_count
;ontrolhub.c,168 :: 		INTCON.RBIF=0;               //Clear the interrupt pin
$0023	$100B			BCF	INTCON, 0
;ontrolhub.c,169 :: 		}
$0024	$	L_interrupt_14:
;ontrolhub.c,172 :: 		if(INTCON.INTF){              //zero cross detected
$0024	$1C8B			BTFSS	INTCON, 1
$0025	$2840			GOTO	L_interrupt_17
;ontrolhub.c,173 :: 		for(ii=0;ii<6;ii++){
$0026	$01BA			CLRF	interrupt_ii_L0, 1
$0027	$	L_interrupt_18:
$0027	$3006			MOVLW	6
$0028	$023A			SUBWF	interrupt_ii_L0, 0
$0029	$1803			BTFSC	STATUS, C
$002A	$2839			GOTO	L_interrupt_19
;ontrolhub.c,174 :: 		dim_t[ii]=dim[ii];        // reload dimmer values
$002B	$083A			MOVF	interrupt_ii_L0, 0
$002C	$3F2A			ADDLW	_dim_t
$002D	$00F1			MOVWF	STACK_1
$002E	$083A			MOVF	interrupt_ii_L0, 0
$002F	$3F30			ADDLW	_dim
$0030	$0084			MOVWF	FSR
$0031	$0800			MOVF	INDF, 0
$0032	$00F0			MOVWF	STACK_0
$0033	$0871			MOVF	STACK_1, 0
$0034	$0084			MOVWF	FSR
$0035	$0870			MOVF	STACK_0, 0
$0036	$0080			MOVWF	INDF
;ontrolhub.c,175 :: 		}
$0037	$	L_interrupt_20:
;ontrolhub.c,173 :: 		for(ii=0;ii<6;ii++){
$0037	$0ABA			INCF	interrupt_ii_L0, 1
;ontrolhub.c,175 :: 		}
$0038	$2827			GOTO	L_interrupt_18
$0039	$	L_interrupt_19:
;ontrolhub.c,176 :: 		d1=0;d2=0;d3=0;            //clear all out
$0039	$1086			BCF	PORTB, 1
$003A	$1106			BCF	PORTB, 2
$003B	$1186			BCF	PORTB, 3
;ontrolhub.c,177 :: 		df=0x00;                   // dimmer flag
$003C	$01B6			CLRF	_df, 1
;ontrolhub.c,178 :: 		TMR0=0x00;
$003D	$0181			CLRF	TMR0, 1
;ontrolhub.c,179 :: 		INTCON.TMR0IF=0;
$003E	$110B			BCF	INTCON, 2
;ontrolhub.c,180 :: 		INTCON.INTF=0;
$003F	$108B			BCF	INTCON, 1
;ontrolhub.c,181 :: 		}
$0040	$	L_interrupt_17:
;ontrolhub.c,183 :: 		if(INTCON.TMR0IF){           //zero cross detected
$0040	$1D0B			BTFSS	INTCON, 2
$0041	$2889			GOTO	L_interrupt_21
;ontrolhub.c,184 :: 		for(ii=0;ii<6;ii++){
$0042	$01BA			CLRF	interrupt_ii_L0, 1
$0043	$	L_interrupt_22:
$0043	$3006			MOVLW	6
$0044	$023A			SUBWF	interrupt_ii_L0, 0
$0045	$1803			BTFSC	STATUS, C
$0046	$287C			GOTO	L_interrupt_23
;ontrolhub.c,185 :: 		if (dim_t[ii]==0x01)
$0047	$083A			MOVF	interrupt_ii_L0, 0
$0048	$3F2A			ADDLW	_dim_t
$0049	$0084			MOVWF	FSR
$004A	$0800			MOVF	INDF, 0
$004B	$00F1			MOVWF	STACK_1
$004C	$0871			MOVF	STACK_1, 0
$004D	$3A01			XORLW	1
$004E	$1D03			BTFSS	STATUS, Z
$004F	$2866			GOTO	L_interrupt_25
;ontrolhub.c,186 :: 		switch (ii){
$0050	$285A			GOTO	L_interrupt_26
;ontrolhub.c,187 :: 		case 0: d1=1;df.f0=1;break;
$0051	$	L_interrupt_28:
$0051	$1486			BSF	PORTB, 1
$0052	$1436			BSF	_df, 0
$0053	$2866			GOTO	L_interrupt_27
;ontrolhub.c,188 :: 		case 1: d2=1;df.f1=1;break;
$0054	$	L_interrupt_29:
$0054	$1506			BSF	PORTB, 2
$0055	$14B6			BSF	_df, 1
$0056	$2866			GOTO	L_interrupt_27
;ontrolhub.c,189 :: 		case 2: d3=1;df.f2=1;break;
$0057	$	L_interrupt_30:
$0057	$1586			BSF	PORTB, 3
$0058	$1536			BSF	_df, 2
$0059	$2866			GOTO	L_interrupt_27
;ontrolhub.c,190 :: 		}
$005A	$	L_interrupt_26:
$005A	$083A			MOVF	interrupt_ii_L0, 0
$005B	$3A00			XORLW	0
$005C	$1903			BTFSC	STATUS, Z
$005D	$2851			GOTO	L_interrupt_28
$005E	$083A			MOVF	interrupt_ii_L0, 0
$005F	$3A01			XORLW	1
$0060	$1903			BTFSC	STATUS, Z
$0061	$2854			GOTO	L_interrupt_29
$0062	$083A			MOVF	interrupt_ii_L0, 0
$0063	$3A02			XORLW	2
$0064	$1903			BTFSC	STATUS, Z
$0065	$2857			GOTO	L_interrupt_30
$0066	$	L_interrupt_27:
$0066	$	L_interrupt_25:
;ontrolhub.c,191 :: 		if(dim_t[ii])
$0066	$083A			MOVF	interrupt_ii_L0, 0
$0067	$3F2A			ADDLW	_dim_t
$0068	$0084			MOVWF	FSR
$0069	$0800			MOVF	INDF, 0
$006A	$00F0			MOVWF	STACK_0
$006B	$0870			MOVF	STACK_0, 0
$006C	$1903			BTFSC	STATUS, Z
$006D	$287A			GOTO	L_interrupt_31
;ontrolhub.c,192 :: 		dim_t[ii]--;
$006E	$083A			MOVF	interrupt_ii_L0, 0
$006F	$3F2A			ADDLW	_dim_t
$0070	$00F1			MOVWF	STACK_1
$0071	$0871			MOVF	STACK_1, 0
$0072	$0084			MOVWF	FSR
$0073	$0800			MOVF	INDF, 0
$0074	$00F0			MOVWF	STACK_0
$0075	$03F0			DECF	STACK_0, 1
$0076	$0871			MOVF	STACK_1, 0
$0077	$0084			MOVWF	FSR
$0078	$0870			MOVF	STACK_0, 0
$0079	$0080			MOVWF	INDF
$007A	$	L_interrupt_31:
;ontrolhub.c,193 :: 		}
$007A	$	L_interrupt_24:
;ontrolhub.c,184 :: 		for(ii=0;ii<6;ii++){
$007A	$0ABA			INCF	interrupt_ii_L0, 1
;ontrolhub.c,193 :: 		}
$007B	$2843			GOTO	L_interrupt_22
$007C	$	L_interrupt_23:
;ontrolhub.c,194 :: 		PORTD.f1=~PORTD.f1;
$007C	$3000			MOVLW	0
$007D	$1888			BTFSC	PORTD, 1
$007E	$3001			MOVLW	1
$007F	$00F1			MOVWF	STACK_1
$0080	$0971			COMF	STACK_1, W
$0081	$00F0			MOVWF	STACK_0
$0082	$3000			MOVLW	0
$0083	$1870			BTFSC	STACK_0, 0
$0084	$3002			MOVLW	2
$0085	$0608			XORWF	PORTD, 0
$0086	$3902			ANDLW	2
$0087	$0688			XORWF	PORTD, 1
;ontrolhub.c,195 :: 		INTCON.TMR0IF=0;
$0088	$110B			BCF	INTCON, 2
;ontrolhub.c,196 :: 		}
$0089	$	L_interrupt_21:
;ontrolhub.c,198 :: 		}
$0089	$	L_Interrupt_end:
$0089	$0844			MOVF	STSAVED_1, 0
$008A	$00F1			MOVWF	STACK_1
$008B	$0843			MOVF	STSAVED_0, 0
$008C	$00F0			MOVWF	STACK_0
$008D	$083D			MOVF	?savePCLATH, 0
$008E	$008A			MOVWF	PCLATH
$008F	$083B			MOVF	?saveFSR, 0
$0090	$0084			MOVWF	FSR
$0091	$0E3C			SWAPF	?saveSTATUS, 0
$0092	$0083			MOVWF	STATUS
$0093	$0EFF			SWAPF	STACK_15, 1
$0094	$0E7F			SWAPF	STACK_15, 0
$0095	$0009			RETFIE
$01F7	$	_Usart_Write:
$01F7	$	L_Usart_Write_3:
$01F7	$3000			MOVLW	0
$01F8	$1303			BCF	STATUS, RP1
$01F9	$1683			BSF	STATUS, RP0
$01FA	$1898			BTFSC	TXSTA, 1
$01FB	$3001			MOVLW	1
$01FC	$00F1			MOVWF	STACK_1
$01FD	$0871			MOVF	STACK_1, 0
$01FE	$3A00			XORLW	0
$01FF	$1D03			BTFSS	STATUS, Z
$0200	$2A03			GOTO	L_Usart_Write_4
$0201	$0000			NOP
$0202	$29F7			GOTO	L_Usart_Write_3
$0203	$	L_Usart_Write_4:
$0203	$1283			BCF	STATUS, RP0
$0204	$083E			MOVF	FARG_Usart_Write+0, 0
$0205	$0099			MOVWF	TXREG
$0206	$0008			RETURN
$01D4	$	GlobalIniontrolhub:
$01D4	$3000			MOVLW	0
$01D5	$1303			BCF	STATUS, RP1
$01D6	$1283			BCF	STATUS, RP0
$01D7	$00A0			MOVWF	_ir_rx_data+0
$01D8	$3000			MOVLW	0
$01D9	$00A2			MOVWF	_rx_tmp+0
$01DA	$3000			MOVLW	0
$01DB	$00A1			MOVWF	_data_bit+0
$01DC	$3000			MOVLW	0
$01DD	$00A7			MOVWF	_data_byte+0
$01DE	$3000			MOVLW	0
$01DF	$00A8			MOVWF	_code+0
$01E0	$3000			MOVLW	0
$01E1	$00A9			MOVWF	_code+1
$01E2	$3000			MOVLW	0
$01E3	$00B7			MOVWF	_of+0
$01E4	$3000			MOVLW	0
$01E5	$00B6			MOVWF	_df+0
$01E6	$0008			RETURN
$01E7	$	_Usart_Init:
$01E7	$1303			BCF	STATUS, RP1
$01E8	$1683			BSF	STATUS, RP0
$01E9	$1698			BSF	TXSTA, 5
$01EA	$3090			MOVLW	144
$01EB	$1283			BCF	STATUS, RP0
$01EC	$0098			MOVWF	RCSTA
$01ED	$1683			BSF	STATUS, RP0
$01EE	$1787			BSF	TRISC, 7
$01EF	$1307			BCF	TRISC, 6
$01F0	$	L_Usart_Init_0:
$01F0	$1283			BCF	STATUS, RP0
$01F1	$1E8C			BTFSS	PIR1, 5
$01F2	$29F6			GOTO	L_Usart_Init_1
$01F3	$081A			MOVF	RCREG, 0
$01F4	$00C2			MOVWF	Usart_Init_tmp_L0
$01F5	$29F0			GOTO	L_Usart_Init_0
$01F6	$	L_Usart_Init_1:
$01F6	$0008			RETURN
$0096	$	_main:
;ontrolhub.c,77 :: 		void main(){
;ontrolhub.c,78 :: 		ADCON1=0x06;
$0096	$21D4			CALL	GlobalIniontrolhub
$0097	$3006			MOVLW	6
$0098	$1683			BSF	STATUS, RP0
$0099	$009F			MOVWF	ADCON1
;ontrolhub.c,79 :: 		TRISA=0x00;
$009A	$0185			CLRF	TRISA, 1
;ontrolhub.c,80 :: 		PORTA=0x00;
$009B	$1283			BCF	STATUS, RP0
$009C	$0185			CLRF	PORTA, 1
;ontrolhub.c,81 :: 		TRISB=0x81;
$009D	$3081			MOVLW	129
$009E	$1683			BSF	STATUS, RP0
$009F	$0086			MOVWF	TRISB
;ontrolhub.c,82 :: 		PORTB=0x00;
$00A0	$1283			BCF	STATUS, RP0
$00A1	$0186			CLRF	PORTB, 1
;ontrolhub.c,83 :: 		PORTC=0x00;
$00A2	$0187			CLRF	PORTC, 1
;ontrolhub.c,84 :: 		PORTC=0x00;
$00A3	$0187			CLRF	PORTC, 1
;ontrolhub.c,85 :: 		TRISD=0x00;
$00A4	$1683			BSF	STATUS, RP0
$00A5	$0188			CLRF	TRISD, 1
;ontrolhub.c,86 :: 		PORTD=0x00;
$00A6	$1283			BCF	STATUS, RP0
$00A7	$0188			CLRF	PORTD, 1
;ontrolhub.c,88 :: 		ir_rx_indicator=1;
$00A8	$1706			BSF	PORTB, 6
;ontrolhub.c,89 :: 		delay_ms(100);
$00A9	$3003			MOVLW	3
$00AA	$00FC			MOVWF	STACK_12
$00AB	$30FF			MOVLW	255
$00AC	$00FB			MOVWF	STACK_11
$00AD	$30FF			MOVLW	255
$00AE	$00FA			MOVWF	STACK_10
$00AF	$0BFC			DECFSZ	STACK_12, F
$00B0	$28B2			GOTO	$+2
$00B1	$28B9			GOTO	$+8
$00B2	$0BFB			DECFSZ	STACK_11, F
$00B3	$28B5			GOTO	$+2
$00B4	$28B8			GOTO	$+4
$00B5	$0BFA			DECFSZ	STACK_10, F
$00B6	$28B5			GOTO	$-1
$00B7	$28B2			GOTO	$-5
$00B8	$28AF			GOTO	$-9
$00B9	$308C			MOVLW	140
$00BA	$00FB			MOVWF	STACK_11
$00BB	$30FF			MOVLW	255
$00BC	$00FA			MOVWF	STACK_10
$00BD	$0BFB			DECFSZ	STACK_11, F
$00BE	$28C0			GOTO	$+2
$00BF	$28C3			GOTO	$+4
$00C0	$0BFA			DECFSZ	STACK_10, F
$00C1	$28C0			GOTO	$-1
$00C2	$28BD			GOTO	$-5
$00C3	$30A1			MOVLW	161
$00C4	$00FA			MOVWF	STACK_10
$00C5	$0BFA			DECFSZ	STACK_10, F
$00C6	$28C5			GOTO	$-1
$00C7	$0000			NOP
;ontrolhub.c,90 :: 		ir_rx_indicator=0;
$00C8	$1306			BCF	PORTB, 6
;ontrolhub.c,91 :: 		delay_ms(100);
$00C9	$3003			MOVLW	3
$00CA	$00FC			MOVWF	STACK_12
$00CB	$30FF			MOVLW	255
$00CC	$00FB			MOVWF	STACK_11
$00CD	$30FF			MOVLW	255
$00CE	$00FA			MOVWF	STACK_10
$00CF	$0BFC			DECFSZ	STACK_12, F
$00D0	$28D2			GOTO	$+2
$00D1	$28D9			GOTO	$+8
$00D2	$0BFB			DECFSZ	STACK_11, F
$00D3	$28D5			GOTO	$+2
$00D4	$28D8			GOTO	$+4
$00D5	$0BFA			DECFSZ	STACK_10, F
$00D6	$28D5			GOTO	$-1
$00D7	$28D2			GOTO	$-5
$00D8	$28CF			GOTO	$-9
$00D9	$308C			MOVLW	140
$00DA	$00FB			MOVWF	STACK_11
$00DB	$30FF			MOVLW	255
$00DC	$00FA			MOVWF	STACK_10
$00DD	$0BFB			DECFSZ	STACK_11, F
$00DE	$28E0			GOTO	$+2
$00DF	$28E3			GOTO	$+4
$00E0	$0BFA			DECFSZ	STACK_10, F
$00E1	$28E0			GOTO	$-1
$00E2	$28DD			GOTO	$-5
$00E3	$30A1			MOVLW	161
$00E4	$00FA			MOVWF	STACK_10
$00E5	$0BFA			DECFSZ	STACK_10, F
$00E6	$28E5			GOTO	$-1
$00E7	$0000			NOP
;ontrolhub.c,92 :: 		ir_rx_indicator=1;
$00E8	$1706			BSF	PORTB, 6
;ontrolhub.c,93 :: 		delay_ms(100);
$00E9	$3003			MOVLW	3
$00EA	$00FC			MOVWF	STACK_12
$00EB	$30FF			MOVLW	255
$00EC	$00FB			MOVWF	STACK_11
$00ED	$30FF			MOVLW	255
$00EE	$00FA			MOVWF	STACK_10
$00EF	$0BFC			DECFSZ	STACK_12, F
$00F0	$28F2			GOTO	$+2
$00F1	$28F9			GOTO	$+8
$00F2	$0BFB			DECFSZ	STACK_11, F
$00F3	$28F5			GOTO	$+2
$00F4	$28F8			GOTO	$+4
$00F5	$0BFA			DECFSZ	STACK_10, F
$00F6	$28F5			GOTO	$-1
$00F7	$28F2			GOTO	$-5
$00F8	$28EF			GOTO	$-9
$00F9	$308C			MOVLW	140
$00FA	$00FB			MOVWF	STACK_11
$00FB	$30FF			MOVLW	255
$00FC	$00FA			MOVWF	STACK_10
$00FD	$0BFB			DECFSZ	STACK_11, F
$00FE	$2900			GOTO	$+2
$00FF	$2903			GOTO	$+4
$0100	$0BFA			DECFSZ	STACK_10, F
$0101	$2900			GOTO	$-1
$0102	$28FD			GOTO	$-5
$0103	$30A1			MOVLW	161
$0104	$00FA			MOVWF	STACK_10
$0105	$0BFA			DECFSZ	STACK_10, F
$0106	$2905			GOTO	$-1
$0107	$0000			NOP
;ontrolhub.c,94 :: 		ir_rx_indicator=0;
$0108	$1306			BCF	PORTB, 6
;ontrolhub.c,97 :: 		OPTION_REG=0b00000001;       //RBPU' INTEDG T0CS T0SE PSA PS2 PS1 PS0
$0109	$3001			MOVLW	1
$010A	$1683			BSF	STATUS, RP0
$010B	$0081			MOVWF	OPTION_REG
;ontrolhub.c,99 :: 		T1CON=0b00100100;            //  T1CKPS1 T1CKPS0 T1OSCEN T1SYNC' TMR1CS TMR1ON
$010C	$3024			MOVLW	36
$010D	$1283			BCF	STATUS, RP0
$010E	$0090			MOVWF	T1CON
;ontrolhub.c,101 :: 		PIE1 =0b00000001;            //EEIE CMIE RCIE TXIE  CCP1IE TMR2IE TMR1IE
$010F	$3001			MOVLW	1
$0110	$1683			BSF	STATUS, RP0
$0111	$008C			MOVWF	PIE1
;ontrolhub.c,102 :: 		INTCON=0b11111000;           //GGIE PEIE T0IE INTE RBIE T0IF INTF RBIF
$0112	$30F8			MOVLW	248
$0113	$008B			MOVWF	INTCON
;ontrolhub.c,104 :: 		Usart_Init(19200);           //USART data rates
$0114	$3040			MOVLW	64
$0115	$0099			MOVWF	SPBRG
$0116	$1518			BSF	TXSTA, BRGH
$0117	$21E7			CALL	_Usart_Init
;ontrolhub.c,107 :: 		dim[0]=40;
$0118	$3028			MOVLW	40
$0119	$00B0			MOVWF	_dim
;ontrolhub.c,108 :: 		dim[1]=10;
$011A	$300A			MOVLW	10
$011B	$00B1			MOVWF	_dim+1
;ontrolhub.c,109 :: 		while(1){
$011C	$	L_main_0:
;ontrolhub.c,110 :: 		if(code[1]){
$011C	$0829			MOVF	_code+1, 0
$011D	$1903			BTFSC	STATUS, Z
$011E	$2924			GOTO	L_main_2
;ontrolhub.c,111 :: 		nec_a=code[0];
$011F	$0828			MOVF	_code, 0
$0120	$00B8			MOVWF	_nec_a
;ontrolhub.c,113 :: 		nec=code[1];
$0121	$0829			MOVF	_code+1, 0
$0122	$00B9			MOVWF	_nec
;ontrolhub.c,114 :: 		code[1]=0;
$0123	$01A9			CLRF	_code+1, 1
;ontrolhub.c,115 :: 		}
$0124	$	L_main_2:
;ontrolhub.c,116 :: 		if(nec){                    //nec =code[1] the data from IR
$0124	$0839			MOVF	_nec, 0
$0125	$1903			BTFSC	STATUS, Z
$0126	$2962			GOTO	L_main_3
;ontrolhub.c,117 :: 		switch (nec){
$0127	$2940			GOTO	L_main_4
;ontrolhub.c,118 :: 		case o_1: of1=1;of.f0=1;break;
$0128	$	L_main_6:
$0128	$1405			BSF	PORTA, 0
$0129	$1437			BSF	_of, 0
$012A	$295C			GOTO	L_main_5
;ontrolhub.c,119 :: 		case o_2: of2=1;of.f1=1;break;
$012B	$	L_main_7:
$012B	$1485			BSF	PORTA, 1
$012C	$14B7			BSF	_of, 1
$012D	$295C			GOTO	L_main_5
;ontrolhub.c,120 :: 		case o_3: of3=1;of.f2=1;break;
$012E	$	L_main_8:
$012E	$1505			BSF	PORTA, 2
$012F	$1537			BSF	_of, 2
$0130	$295C			GOTO	L_main_5
;ontrolhub.c,121 :: 		case f_1: of1=0;of.f0=0;break;
$0131	$	L_main_9:
$0131	$1005			BCF	PORTA, 0
$0132	$1037			BCF	_of, 0
$0133	$295C			GOTO	L_main_5
;ontrolhub.c,122 :: 		case f_2: of2=0;of.f1=0;break;
$0134	$	L_main_10:
$0134	$1085			BCF	PORTA, 1
$0135	$10B7			BCF	_of, 1
$0136	$295C			GOTO	L_main_5
;ontrolhub.c,123 :: 		case f_3: of3=0;of.f2=0;break;
$0137	$	L_main_11:
$0137	$1105			BCF	PORTA, 2
$0138	$1137			BCF	_of, 2
$0139	$295C			GOTO	L_main_5
;ontrolhub.c,124 :: 		case f_a: of1=0;of2=0;of3=0;
$013A	$	L_main_12:
$013A	$1005			BCF	PORTA, 0
$013B	$1085			BCF	PORTA, 1
$013C	$1105			BCF	PORTA, 2
;ontrolhub.c,125 :: 		of=of&0XF0;break;
$013D	$30F0			MOVLW	240
$013E	$05B7			ANDWF	_of, 1
$013F	$295C			GOTO	L_main_5
;ontrolhub.c,126 :: 		}
$0140	$	L_main_4:
$0140	$0839			MOVF	_nec, 0
$0141	$3A16			XORLW	22
$0142	$1903			BTFSC	STATUS, Z
$0143	$2928			GOTO	L_main_6
$0144	$0839			MOVF	_nec, 0
$0145	$3A0C			XORLW	12
$0146	$1903			BTFSC	STATUS, Z
$0147	$292B			GOTO	L_main_7
$0148	$0839			MOVF	_nec, 0
$0149	$3A08			XORLW	8
$014A	$1903			BTFSC	STATUS, Z
$014B	$292E			GOTO	L_main_8
$014C	$0839			MOVF	_nec, 0
$014D	$3A0D			XORLW	13
$014E	$1903			BTFSC	STATUS, Z
$014F	$2931			GOTO	L_main_9
$0150	$0839			MOVF	_nec, 0
$0151	$3A5E			XORLW	94
$0152	$1903			BTFSC	STATUS, Z
$0153	$2934			GOTO	L_main_10
$0154	$0839			MOVF	_nec, 0
$0155	$3A5A			XORLW	90
$0156	$1903			BTFSC	STATUS, Z
$0157	$2937			GOTO	L_main_11
$0158	$0839			MOVF	_nec, 0
$0159	$3A45			XORLW	69
$015A	$1903			BTFSC	STATUS, Z
$015B	$293A			GOTO	L_main_12
$015C	$	L_main_5:
;ontrolhub.c,127 :: 		Usart_Write(nec_a);
$015C	$0838			MOVF	_nec_a, 0
$015D	$00BE			MOVWF	FARG_Usart_Write+0
$015E	$21F7			CALL	_Usart_Write
;ontrolhub.c,128 :: 		Usart_Write(nec);
$015F	$0839			MOVF	_nec, 0
$0160	$00BE			MOVWF	FARG_Usart_Write+0
$0161	$21F7			CALL	_Usart_Write
;ontrolhub.c,129 :: 		}//if
$0162	$	L_main_3:
;ontrolhub.c,131 :: 		nec=0x00;
$0162	$01B9			CLRF	_nec, 1
;ontrolhub.c,133 :: 		}//Stay forever here
$0163	$291C			GOTO	L_main_0
;ontrolhub.c,135 :: 		}//Main fuction
$0164	$2964			GOTO	$
